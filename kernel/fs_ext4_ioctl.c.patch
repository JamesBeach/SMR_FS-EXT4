diff --git a/fs/ext4/ioctl.c b/fs/ext4/ioctl.c
old mode 100644
new mode 100755
index f58a0d1..6c39b00
--- a/fs/ext4/ioctl.c
+++ b/fs/ext4/ioctl.c
@@ -17,6 +17,7 @@
 #include <asm/uaccess.h>
 #include "ext4_jbd2.h"
 #include "ext4.h"
+#include <linux/blk-zoned.h>
 
 #define MAX_32_NUM ((((unsigned long long) 1) << 32) - 1)
 
@@ -584,7 +585,35 @@ resizefs_out:
 		ext4_resize_end(sb);
 		return err;
 	}
+	case EXT4_IOC_REPORT_ZONES: {
+		struct gendisk *disk = sb->s_bdev->bd_disk;
+		void __user *p = (void __user *)arg;
 
+		if (!(filp->f_mode & FMODE_READ) ||
+		    !(filp->f_mode & FMODE_WRITE))
+			return -EBADF;
+
+		return _report_zones_ioctl(disk, p);
+	}
+	case EXT4_IOC_RESET_WP: {
+		struct gendisk *disk = sb->s_bdev->bd_disk;
+
+		if (!(filp->f_mode & FMODE_READ) ||
+		    !(filp->f_mode & FMODE_WRITE))
+			return -EBADF;
+
+		return _reset_wp_ioctl(disk, arg);
+	}
+	case EXT4_IOC_INQUIRY: {
+		struct gendisk *disk = sb->s_bdev->bd_disk;
+		void __user *p = (void __user *)arg;
+
+		if (!(filp->f_mode & FMODE_READ) ||
+		    !(filp->f_mode & FMODE_WRITE))
+			return -EBADF;
+
+		return _inquiry_ioctl(disk, p);
+	}
 	case FITRIM:
 	{
 		struct request_queue *q = bdev_get_queue(sb->s_bdev);
